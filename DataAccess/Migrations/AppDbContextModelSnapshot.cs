// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.audit_log", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("details")
                        .HasColumnType("jsonb");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("audit_logs_pkey");

                    b.HasIndex(new[] { "user_id" }, "idx_audit_user");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("Domain.Models.booking", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("end_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<NpgsqlRange<DateTime>?>("period")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tstzrange")
                        .HasComputedColumnSql("tstzrange(start_time, end_time, '[)'::text)", true);

                    b.Property<int>("seat_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'active'::text");

                    b.Property<int?>("tariff_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("total_amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("bookings_pkey");

                    b.HasIndex("tariff_id");

                    b.HasIndex(new[] { "seat_id", "period" }, "ex_seat_time_n_overlap")
                        .HasFilter("(status = 'active'::text)");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "seat_id", "period" }, "ex_seat_time_n_overlap"), "gist");

                    b.HasIndex(new[] { "period" }, "idx_bookings_period");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "period" }, "idx_bookings_period"), "gist");

                    b.HasIndex(new[] { "seat_id" }, "idx_bookings_seat");

                    b.HasIndex(new[] { "user_id" }, "idx_bookings_user");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("Domain.Models.payment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("booking_id")
                        .HasColumnType("integer");

                    b.Property<string>("external_id")
                        .HasColumnType("text");

                    b.Property<string>("method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("paid_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id")
                        .HasName("payments_pkey");

                    b.HasIndex(new[] { "booking_id" }, "idx_payments_booking");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Domain.Models.pc_spec", b =>
                {
                    b.Property<int>("seat_id")
                        .HasColumnType("integer");

                    b.Property<string>("cpu")
                        .HasColumnType("text");

                    b.Property<string>("extras")
                        .HasColumnType("jsonb");

                    b.Property<string>("gpu")
                        .HasColumnType("text");

                    b.Property<string>("peripherals")
                        .HasColumnType("text");

                    b.Property<int?>("ram_gb")
                        .HasColumnType("integer");

                    b.Property<int?>("storage_gb")
                        .HasColumnType("integer");

                    b.HasKey("seat_id")
                        .HasName("pc_specs_pkey");

                    b.ToTable("pc_specs");
                });

            modelBuilder.Entity("Domain.Models.role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "code" }, "roles_code_key")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Domain.Models.room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id")
                        .HasName("rooms_pkey");

                    b.HasIndex(new[] { "name" }, "rooms_name_key")
                        .IsUnique();

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Domain.Models.seat", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<int>("room_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("seats_pkey");

                    b.HasIndex(new[] { "room_id", "number" }, "uq_seat_room_number")
                        .IsUnique();

                    b.ToTable("seats");
                });

            modelBuilder.Entity("Domain.Models.tariff", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("price_per_hour")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateOnly?>("valid_from")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("valid_to")
                        .HasColumnType("date");

                    b.HasKey("id")
                        .HasName("tariffs_pkey");

                    b.HasIndex(new[] { "name" }, "tariffs_name_key")
                        .IsUnique();

                    b.ToTable("tariffs");
                });

            modelBuilder.Entity("Domain.Models.user", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("user_role", b =>
                {
                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.HasKey("user_id", "role_id")
                        .HasName("user_roles_pkey");

                    b.HasIndex("role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.audit_log", b =>
                {
                    b.HasOne("Domain.Models.user", "user")
                        .WithMany("audit_logs")
                        .HasForeignKey("user_id")
                        .HasConstraintName("audit_logs_user_id_fkey");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.booking", b =>
                {
                    b.HasOne("Domain.Models.seat", "seat")
                        .WithMany("bookings")
                        .HasForeignKey("seat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookings_seat_id_fkey");

                    b.HasOne("Domain.Models.tariff", "tariff")
                        .WithMany("bookings")
                        .HasForeignKey("tariff_id")
                        .HasConstraintName("bookings_tariff_id_fkey");

                    b.HasOne("Domain.Models.user", "user")
                        .WithMany("bookings")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookings_user_id_fkey");

                    b.Navigation("seat");

                    b.Navigation("tariff");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.payment", b =>
                {
                    b.HasOne("Domain.Models.booking", "booking")
                        .WithMany("payments")
                        .HasForeignKey("booking_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("payments_booking_id_fkey");

                    b.Navigation("booking");
                });

            modelBuilder.Entity("Domain.Models.pc_spec", b =>
                {
                    b.HasOne("Domain.Models.seat", "seat")
                        .WithOne("pc_spec")
                        .HasForeignKey("Domain.Models.pc_spec", "seat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pc_specs_seat_id_fkey");

                    b.Navigation("seat");
                });

            modelBuilder.Entity("Domain.Models.seat", b =>
                {
                    b.HasOne("Domain.Models.room", "room")
                        .WithMany("seats")
                        .HasForeignKey("room_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("seats_room_id_fkey");

                    b.Navigation("room");
                });

            modelBuilder.Entity("user_role", b =>
                {
                    b.HasOne("Domain.Models.role", null)
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_roles_role_id_fkey");

                    b.HasOne("Domain.Models.user", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_roles_user_id_fkey");
                });

            modelBuilder.Entity("Domain.Models.booking", b =>
                {
                    b.Navigation("payments");
                });

            modelBuilder.Entity("Domain.Models.room", b =>
                {
                    b.Navigation("seats");
                });

            modelBuilder.Entity("Domain.Models.seat", b =>
                {
                    b.Navigation("bookings");

                    b.Navigation("pc_spec");
                });

            modelBuilder.Entity("Domain.Models.tariff", b =>
                {
                    b.Navigation("bookings");
                });

            modelBuilder.Entity("Domain.Models.user", b =>
                {
                    b.Navigation("audit_logs");

                    b.Navigation("bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
